// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Fingrid.API.Models.Pick_FileDataPrivate.Exclude_keyofFileDataPrivate
{
    /// <summary>
    /// From T, pick a set of properties whose keys are in the union K
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DatasetId__ : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The createdAtUtc property</summary>
        public DateTimeOffset? CreatedAtUtc { get; set; }
        /// <summary>The dataFrom property</summary>
        public DateTimeOffset? DataFrom { get; set; }
        /// <summary>The dataTo property</summary>
        public DateTimeOffset? DataTo { get; set; }
        /// <summary>The filenameEn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FilenameEn { get; set; }
#nullable restore
#else
        public string FilenameEn { get; set; }
#endif
        /// <summary>The filenameFi property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FilenameFi { get; set; }
#nullable restore
#else
        public string FilenameFi { get; set; }
#endif
        /// <summary>The fileType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileType { get; set; }
#nullable restore
#else
        public string FileType { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The link property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Link { get; set; }
#nullable restore
#else
        public string Link { get; set; }
#endif
        /// <summary>The messageEn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MessageEn { get; set; }
#nullable restore
#else
        public string MessageEn { get; set; }
#endif
        /// <summary>The messageFi property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MessageFi { get; set; }
#nullable restore
#else
        public string MessageFi { get; set; }
#endif
        /// <summary>The modifiedAtUtc property</summary>
        public DateTimeOffset? ModifiedAtUtc { get; set; }
        /// <summary>The size property</summary>
        public double? Size { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Fingrid.API.Models.Pick_FileDataPrivate.Exclude_keyofFileDataPrivate.DatasetId__"/> and sets the default values.
        /// </summary>
        public DatasetId__()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Fingrid.API.Models.Pick_FileDataPrivate.Exclude_keyofFileDataPrivate.DatasetId__"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Fingrid.API.Models.Pick_FileDataPrivate.Exclude_keyofFileDataPrivate.DatasetId__ CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Fingrid.API.Models.Pick_FileDataPrivate.Exclude_keyofFileDataPrivate.DatasetId__();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "createdAtUtc", n => { CreatedAtUtc = n.GetDateTimeOffsetValue(); } },
                { "dataFrom", n => { DataFrom = n.GetDateTimeOffsetValue(); } },
                { "dataTo", n => { DataTo = n.GetDateTimeOffsetValue(); } },
                { "fileType", n => { FileType = n.GetStringValue(); } },
                { "filenameEn", n => { FilenameEn = n.GetStringValue(); } },
                { "filenameFi", n => { FilenameFi = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "link", n => { Link = n.GetStringValue(); } },
                { "messageEn", n => { MessageEn = n.GetStringValue(); } },
                { "messageFi", n => { MessageFi = n.GetStringValue(); } },
                { "modifiedAtUtc", n => { ModifiedAtUtc = n.GetDateTimeOffsetValue(); } },
                { "size", n => { Size = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("createdAtUtc", CreatedAtUtc);
            writer.WriteDateTimeOffsetValue("dataFrom", DataFrom);
            writer.WriteDateTimeOffsetValue("dataTo", DataTo);
            writer.WriteStringValue("filenameEn", FilenameEn);
            writer.WriteStringValue("filenameFi", FilenameFi);
            writer.WriteStringValue("fileType", FileType);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("link", Link);
            writer.WriteStringValue("messageEn", MessageEn);
            writer.WriteStringValue("messageFi", MessageFi);
            writer.WriteDateTimeOffsetValue("modifiedAtUtc", ModifiedAtUtc);
            writer.WriteDoubleValue("size", Size);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
