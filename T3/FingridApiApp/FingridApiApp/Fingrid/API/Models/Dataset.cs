// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Fingrid.API.Models.Pick_Dataset
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Dataset : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The availableFormats property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Fingrid.API.Models.DatasetFormat?>? AvailableFormats { get; set; }
#nullable restore
#else
        public List<global::Fingrid.API.Models.DatasetFormat?> AvailableFormats { get; set; }
#endif
        /// <summary>The contactPersons property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContactPersons { get; set; }
#nullable restore
#else
        public string ContactPersons { get; set; }
#endif
        /// <summary>The contentGroupsEn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ContentGroupsEn { get; set; }
#nullable restore
#else
        public List<string> ContentGroupsEn { get; set; }
#endif
        /// <summary>The contentGroupsFi property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ContentGroupsFi { get; set; }
#nullable restore
#else
        public List<string> ContentGroupsFi { get; set; }
#endif
        /// <summary>The dataPeriodEn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DataPeriodEn { get; set; }
#nullable restore
#else
        public string DataPeriodEn { get; set; }
#endif
        /// <summary>The dataPeriodFi property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DataPeriodFi { get; set; }
#nullable restore
#else
        public string DataPeriodFi { get; set; }
#endif
        /// <summary>The descriptionEn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DescriptionEn { get; set; }
#nullable restore
#else
        public string DescriptionEn { get; set; }
#endif
        /// <summary>The descriptionFi property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DescriptionFi { get; set; }
#nullable restore
#else
        public string DescriptionFi { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The isPublic property</summary>
        public bool? IsPublic { get; set; }
        /// <summary>The keyWordsEn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? KeyWordsEn { get; set; }
#nullable restore
#else
        public List<string> KeyWordsEn { get; set; }
#endif
        /// <summary>The keyWordsFi property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? KeyWordsFi { get; set; }
#nullable restore
#else
        public List<string> KeyWordsFi { get; set; }
#endif
        /// <summary>The license property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Fingrid.API.Models.License? License { get; set; }
#nullable restore
#else
        public global::Fingrid.API.Models.License License { get; set; }
#endif
        /// <summary>The modifiedAtUtc property</summary>
        public DateTimeOffset? ModifiedAtUtc { get; set; }
        /// <summary>The nameEn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameEn { get; set; }
#nullable restore
#else
        public string NameEn { get; set; }
#endif
        /// <summary>The nameFi property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameFi { get; set; }
#nullable restore
#else
        public string NameFi { get; set; }
#endif
        /// <summary>The organization property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Organization { get; set; }
#nullable restore
#else
        public string Organization { get; set; }
#endif
        /// <summary>The status property</summary>
        public global::Fingrid.API.Models.DatasetStatus? Status { get; set; }
        /// <summary>The type property</summary>
        public global::Fingrid.API.Models.DatasetType? Type { get; set; }
        /// <summary>The unitEn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitEn { get; set; }
#nullable restore
#else
        public string UnitEn { get; set; }
#endif
        /// <summary>The unitFi property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitFi { get; set; }
#nullable restore
#else
        public string UnitFi { get; set; }
#endif
        /// <summary>The updateCadenceEn property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdateCadenceEn { get; set; }
#nullable restore
#else
        public string UpdateCadenceEn { get; set; }
#endif
        /// <summary>The updateCadenceFi property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdateCadenceFi { get; set; }
#nullable restore
#else
        public string UpdateCadenceFi { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Fingrid.API.Models.Pick_Dataset.Dataset"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Fingrid.API.Models.Pick_Dataset.Dataset CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Fingrid.API.Models.Pick_Dataset.Dataset();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "availableFormats", n => { AvailableFormats = n.GetCollectionOfEnumValues<global::Fingrid.API.Models.DatasetFormat>()?.AsList(); } },
                { "contactPersons", n => { ContactPersons = n.GetStringValue(); } },
                { "contentGroupsEn", n => { ContentGroupsEn = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "contentGroupsFi", n => { ContentGroupsFi = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "dataPeriodEn", n => { DataPeriodEn = n.GetStringValue(); } },
                { "dataPeriodFi", n => { DataPeriodFi = n.GetStringValue(); } },
                { "descriptionEn", n => { DescriptionEn = n.GetStringValue(); } },
                { "descriptionFi", n => { DescriptionFi = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "isPublic", n => { IsPublic = n.GetBoolValue(); } },
                { "keyWordsEn", n => { KeyWordsEn = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "keyWordsFi", n => { KeyWordsFi = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "license", n => { License = n.GetObjectValue<global::Fingrid.API.Models.License>(global::Fingrid.API.Models.License.CreateFromDiscriminatorValue); } },
                { "modifiedAtUtc", n => { ModifiedAtUtc = n.GetDateTimeOffsetValue(); } },
                { "nameEn", n => { NameEn = n.GetStringValue(); } },
                { "nameFi", n => { NameFi = n.GetStringValue(); } },
                { "organization", n => { Organization = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Fingrid.API.Models.DatasetStatus>(); } },
                { "type", n => { Type = n.GetEnumValue<global::Fingrid.API.Models.DatasetType>(); } },
                { "unitEn", n => { UnitEn = n.GetStringValue(); } },
                { "unitFi", n => { UnitFi = n.GetStringValue(); } },
                { "updateCadenceEn", n => { UpdateCadenceEn = n.GetStringValue(); } },
                { "updateCadenceFi", n => { UpdateCadenceFi = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfEnumValues<global::Fingrid.API.Models.DatasetFormat>("availableFormats", AvailableFormats);
            writer.WriteStringValue("contactPersons", ContactPersons);
            writer.WriteCollectionOfPrimitiveValues<string>("contentGroupsEn", ContentGroupsEn);
            writer.WriteCollectionOfPrimitiveValues<string>("contentGroupsFi", ContentGroupsFi);
            writer.WriteStringValue("dataPeriodEn", DataPeriodEn);
            writer.WriteStringValue("dataPeriodFi", DataPeriodFi);
            writer.WriteStringValue("descriptionEn", DescriptionEn);
            writer.WriteStringValue("descriptionFi", DescriptionFi);
            writer.WriteDoubleValue("id", Id);
            writer.WriteBoolValue("isPublic", IsPublic);
            writer.WriteCollectionOfPrimitiveValues<string>("keyWordsEn", KeyWordsEn);
            writer.WriteCollectionOfPrimitiveValues<string>("keyWordsFi", KeyWordsFi);
            writer.WriteObjectValue<global::Fingrid.API.Models.License>("license", License);
            writer.WriteDateTimeOffsetValue("modifiedAtUtc", ModifiedAtUtc);
            writer.WriteStringValue("nameEn", NameEn);
            writer.WriteStringValue("nameFi", NameFi);
            writer.WriteStringValue("organization", Organization);
            writer.WriteEnumValue<global::Fingrid.API.Models.DatasetStatus>("status", Status);
            writer.WriteEnumValue<global::Fingrid.API.Models.DatasetType>("type", Type);
            writer.WriteStringValue("unitEn", UnitEn);
            writer.WriteStringValue("unitFi", UnitFi);
            writer.WriteStringValue("updateCadenceEn", UpdateCadenceEn);
            writer.WriteStringValue("updateCadenceFi", UpdateCadenceFi);
        }
    }
}
#pragma warning restore CS0618
