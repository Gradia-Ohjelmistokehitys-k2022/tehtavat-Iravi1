// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Fingrid.API.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class IPagination : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The currentPage property</summary>
        public double? CurrentPage { get; set; }
        /// <summary>The from property</summary>
        public double? From { get; set; }
        /// <summary>The lastPage property</summary>
        public double? LastPage { get; set; }
        /// <summary>The nextPage property</summary>
        public double? NextPage { get; set; }
        /// <summary>The perPage property</summary>
        public double? PerPage { get; set; }
        /// <summary>The prevPage property</summary>
        public double? PrevPage { get; set; }
        /// <summary>The to property</summary>
        public double? To { get; set; }
        /// <summary>The total property</summary>
        public double? Total { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Fingrid.API.Models.IPagination"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Fingrid.API.Models.IPagination CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Fingrid.API.Models.IPagination();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "currentPage", n => { CurrentPage = n.GetDoubleValue(); } },
                { "from", n => { From = n.GetDoubleValue(); } },
                { "lastPage", n => { LastPage = n.GetDoubleValue(); } },
                { "nextPage", n => { NextPage = n.GetDoubleValue(); } },
                { "perPage", n => { PerPage = n.GetDoubleValue(); } },
                { "prevPage", n => { PrevPage = n.GetDoubleValue(); } },
                { "to", n => { To = n.GetDoubleValue(); } },
                { "total", n => { Total = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("currentPage", CurrentPage);
            writer.WriteDoubleValue("from", From);
            writer.WriteDoubleValue("lastPage", LastPage);
            writer.WriteDoubleValue("nextPage", NextPage);
            writer.WriteDoubleValue("perPage", PerPage);
            writer.WriteDoubleValue("prevPage", PrevPage);
            writer.WriteDoubleValue("to", To);
            writer.WriteDoubleValue("total", Total);
        }
    }
}
#pragma warning restore CS0618
