// <auto-generated/>
#pragma warning disable CS0618
using Fingrid.API.Datasets.Item.Files.Item;
using Fingrid.API.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Fingrid.API.Datasets.Item.Files
{
    /// <summary>
    /// Builds and executes requests for operations under \datasets\{datasetId}\files
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class FilesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Fingrid.API.datasets.item.files.item collection</summary>
        /// <param name="position">Format - int32. The ID of the file to return</param>
        /// <returns>A <see cref="global::Fingrid.API.Datasets.Item.Files.Item.WithFileItemRequestBuilder"/></returns>
        public global::Fingrid.API.Datasets.Item.Files.Item.WithFileItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("fileId", position);
                return new global::Fingrid.API.Datasets.Item.Files.Item.WithFileItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Fingrid.API.datasets.item.files.item collection</summary>
        /// <param name="position">Format - int32. The ID of the file to return</param>
        /// <returns>A <see cref="global::Fingrid.API.Datasets.Item.Files.Item.WithFileItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Fingrid.API.Datasets.Item.Files.Item.WithFileItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("fileId", position);
                return new global::Fingrid.API.Datasets.Item.Files.Item.WithFileItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Fingrid.API.Datasets.Item.Files.FilesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FilesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/datasets/{datasetId}/files{?endTime*,page*,pageSize*,sortOrder*,startTime*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Fingrid.API.Datasets.Item.Files.FilesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FilesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/datasets/{datasetId}/files{?endTime*,page*,pageSize*,sortOrder*,startTime*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns datasetfiledata or 404 error if not found or a 422 error if validation fails.
        /// </summary>
        /// <returns>A <see cref="global::Fingrid.API.Models.IWithPagination_FileData_"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Fingrid.API.Datasets.Item.Files.IWithPagination_FileData_404Error">When receiving a 404 status code</exception>
        /// <exception cref="global::Fingrid.API.Models.ValidateError">When receiving a 422 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Fingrid.API.Models.IWithPagination_FileData_?> GetAsync(Action<RequestConfiguration<global::Fingrid.API.Datasets.Item.Files.FilesRequestBuilder.FilesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Fingrid.API.Models.IWithPagination_FileData_> GetAsync(Action<RequestConfiguration<global::Fingrid.API.Datasets.Item.Files.FilesRequestBuilder.FilesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "404", global::Fingrid.API.Datasets.Item.Files.IWithPagination_FileData_404Error.CreateFromDiscriminatorValue },
                { "422", global::Fingrid.API.Models.ValidateError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Fingrid.API.Models.IWithPagination_FileData_>(requestInfo, global::Fingrid.API.Models.IWithPagination_FileData_.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns datasetfiledata or 404 error if not found or a 422 error if validation fails.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Fingrid.API.Datasets.Item.Files.FilesRequestBuilder.FilesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Fingrid.API.Datasets.Item.Files.FilesRequestBuilder.FilesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Fingrid.API.Datasets.Item.Files.FilesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Fingrid.API.Datasets.Item.Files.FilesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Fingrid.API.Datasets.Item.Files.FilesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns datasetfiledata or 404 error if not found or a 422 error if validation fails.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class FilesRequestBuilderGetQueryParameters 
        {
            /// <summary>Format - date-time (as date-time in RFC3339). Ending time up to which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format.</summary>
            [QueryParameter("endTime")]
            public DateTimeOffset? EndTime { get; set; }
            /// <summary>Format - int32. Number of page. Default is 1.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Format - int32. Number of results per page. Value can be between 1-20000. Default is 10.</summary>
            [QueryParameter("pageSize")]
            public int? PageSize { get; set; }
            [Obsolete("This property is deprecated, use SortOrderAsGetSortOrderQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortOrder")]
            public string? SortOrder { get; set; }
#nullable restore
#else
            [QueryParameter("sortOrder")]
            public string SortOrder { get; set; }
#endif
            [QueryParameter("sortOrder")]
            public global::Fingrid.API.Datasets.Item.Files.GetSortOrderQueryParameterType? SortOrderAsGetSortOrderQueryParameterType { get; set; }
            /// <summary>Format - date-time (as date-time in RFC3339). Starting time from which to query data. Timezone is optional, UTC is assumed if not provided. Response is always in UTC time. If you are using tester on this page use Example 1 format, if you are using curl use Example 2 format.</summary>
            [QueryParameter("startTime")]
            public DateTimeOffset? StartTime { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class FilesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Fingrid.API.Datasets.Item.Files.FilesRequestBuilder.FilesRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
