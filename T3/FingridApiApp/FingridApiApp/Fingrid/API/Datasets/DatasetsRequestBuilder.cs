// <auto-generated/>
#pragma warning disable CS0618
using Fingrid.API.Datasets.Item;
using Fingrid.API.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Fingrid.API.Datasets
{
    /// <summary>
    /// Builds and executes requests for operations under \datasets
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DatasetsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Fingrid.API.datasets.item collection</summary>
        /// <param name="position">Format - int32. The ID of the dataset to return</param>
        /// <returns>A <see cref="global::Fingrid.API.Datasets.Item.WithDatasetItemRequestBuilder"/></returns>
        public global::Fingrid.API.Datasets.Item.WithDatasetItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("datasetId", position);
                return new global::Fingrid.API.Datasets.Item.WithDatasetItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Fingrid.API.datasets.item collection</summary>
        /// <param name="position">Format - int32. The ID of the dataset to return</param>
        /// <returns>A <see cref="global::Fingrid.API.Datasets.Item.WithDatasetItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Fingrid.API.Datasets.Item.WithDatasetItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("datasetId", position);
                return new global::Fingrid.API.Datasets.Item.WithDatasetItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Fingrid.API.Datasets.DatasetsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DatasetsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/datasets{?ids*,orderBy*,page*,pageSize*,search*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Fingrid.API.Datasets.DatasetsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DatasetsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/datasets{?ids*,orderBy*,page*,pageSize*,search*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns list of all public datasets, with pagination. If no parameters are given, returns all datasets sorted by dataset ID. If search parameter is given, returns datasets sorted by relevance.
        /// </summary>
        /// <returns>A <see cref="global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsGetResponse?> GetAsDatasetsGetResponseAsync(Action<RequestConfiguration<global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsGetResponse> GetAsDatasetsGetResponseAsync(Action<RequestConfiguration<global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsGetResponse>(requestInfo, global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of all public datasets, with pagination. If no parameters are given, returns all datasets sorted by dataset ID. If search parameter is given, returns datasets sorted by relevance.
        /// </summary>
        /// <returns>A <see cref="global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsDatasetsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsResponse?> GetAsync(Action<RequestConfiguration<global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsResponse> GetAsync(Action<RequestConfiguration<global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsResponse>(requestInfo, global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of all public datasets, with pagination. If no parameters are given, returns all datasets sorted by dataset ID. If search parameter is given, returns datasets sorted by relevance.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Fingrid.API.Datasets.DatasetsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Fingrid.API.Datasets.DatasetsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Fingrid.API.Datasets.DatasetsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Fingrid.API.Models.IWithPagination_DatasetSearchResult_"/>, <see cref="global::Fingrid.API.Models.IWithPagination_DatasetShort_"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DatasetsGetResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Fingrid.API.Models.IWithPagination_DatasetSearchResult_"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Fingrid.API.Models.IWithPagination_DatasetSearchResult_? IWithPaginationDatasetSearchResult { get; set; }
#nullable restore
#else
            public global::Fingrid.API.Models.IWithPagination_DatasetSearchResult_ IWithPaginationDatasetSearchResult { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Fingrid.API.Models.IWithPagination_DatasetShort_"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Fingrid.API.Models.IWithPagination_DatasetShort_? IWithPaginationDatasetShort { get; set; }
#nullable restore
#else
            public global::Fingrid.API.Models.IWithPagination_DatasetShort_ IWithPaginationDatasetShort { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsGetResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsGetResponse();
                result.IWithPaginationDatasetSearchResult = new global::Fingrid.API.Models.IWithPagination_DatasetSearchResult_();
                result.IWithPaginationDatasetShort = new global::Fingrid.API.Models.IWithPagination_DatasetShort_();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(IWithPaginationDatasetSearchResult != null || IWithPaginationDatasetShort != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(IWithPaginationDatasetSearchResult, IWithPaginationDatasetShort);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<global::Fingrid.API.Models.IWithPagination_DatasetSearchResult_>(null, IWithPaginationDatasetSearchResult, IWithPaginationDatasetShort);
            }
        }
        /// <summary>
        /// Returns list of all public datasets, with pagination. If no parameters are given, returns all datasets sorted by dataset ID. If search parameter is given, returns datasets sorted by relevance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DatasetsRequestBuilderGetQueryParameters 
        {
            /// <summary>Comma-separated list of dataset ids</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("ids")]
            public string? Ids { get; set; }
#nullable restore
#else
            [QueryParameter("ids")]
            public string Ids { get; set; }
#endif
            /// <summary>Order results by this attribute. Accepts &quot;id&quot;, &quot;nameFi&quot;, &quot;nameEn&quot;. Default is id.</summary>
            [Obsolete("This property is deprecated, use OrderByAsGetOrderByQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("orderBy")]
            public string? OrderBy { get; set; }
#nullable restore
#else
            [QueryParameter("orderBy")]
            public string OrderBy { get; set; }
#endif
            /// <summary>Order results by this attribute. Accepts &quot;id&quot;, &quot;nameFi&quot;, &quot;nameEn&quot;. Default is id.</summary>
            [QueryParameter("orderBy")]
            public global::Fingrid.API.Datasets.GetOrderByQueryParameterType? OrderByAsGetOrderByQueryParameterType { get; set; }
            /// <summary>Format - int32. Number of page. Default is 1.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Format - int32. Number of results per page. Value can be between 1-20000. Default is 10.</summary>
            [QueryParameter("pageSize")]
            public int? PageSize { get; set; }
            /// <summary>Search phrase to filter datasets. If given as parameter, other parameters are ignored, and results are sorted by relevance. Notes: 1) Search is case insensitive. 2) Search is done for dataset name, description, keywords and content groups. 3) Search is done for both Finnish and English versions of the fields.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("search")]
            public string? Search { get; set; }
#nullable restore
#else
            [QueryParameter("search")]
            public string Search { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DatasetsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Fingrid.API.Models.IWithPagination_DatasetSearchResult_"/>, <see cref="global::Fingrid.API.Models.IWithPagination_DatasetShort_"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DatasetsResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Fingrid.API.Models.IWithPagination_DatasetSearchResult_"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Fingrid.API.Models.IWithPagination_DatasetSearchResult_? IWithPaginationDatasetSearchResult { get; set; }
#nullable restore
#else
            public global::Fingrid.API.Models.IWithPagination_DatasetSearchResult_ IWithPaginationDatasetSearchResult { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Fingrid.API.Models.IWithPagination_DatasetShort_"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Fingrid.API.Models.IWithPagination_DatasetShort_? IWithPaginationDatasetShort { get; set; }
#nullable restore
#else
            public global::Fingrid.API.Models.IWithPagination_DatasetShort_ IWithPaginationDatasetShort { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Fingrid.API.Datasets.DatasetsRequestBuilder.DatasetsResponse();
                result.IWithPaginationDatasetSearchResult = new global::Fingrid.API.Models.IWithPagination_DatasetSearchResult_();
                result.IWithPaginationDatasetShort = new global::Fingrid.API.Models.IWithPagination_DatasetShort_();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(IWithPaginationDatasetSearchResult != null || IWithPaginationDatasetShort != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(IWithPaginationDatasetSearchResult, IWithPaginationDatasetShort);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<global::Fingrid.API.Models.IWithPagination_DatasetSearchResult_>(null, IWithPaginationDatasetSearchResult, IWithPaginationDatasetShort);
            }
        }
    }
}
#pragma warning restore CS0618
